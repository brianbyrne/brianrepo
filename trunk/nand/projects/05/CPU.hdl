// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=ALUout, sel=instruction[15], out=mux1out);
    //not the instruction[15] bit so that so load of reg is reverse of instruction[15]
    //meaning it will load the reg when is an A instruction (instruction[15]=0) and not load when its not an A instruction
    Not(in=instruction[15], out=nottedAintruct);
    Or(a=nottedAintruct, b=instruction[5], out=ADestOred); //intruction[5] means is dest bit
    ARegister(in=mux1out, load=ADestOred, out=AregOut);
    
    //second mux choose between Aregister and inM, a-bit of instruction is used to select
    And(a=instruction[15],b=instruction[12], out=CinstrMem);
   Mux16(a=AregOut,b=inM, sel=CinstrMem, out=mux2out);
   
   // use donothing chip to output to addressM
   DoNothing(in=AregOut, out[0..14]=addressM);
   
   

   
   ALU(x=DregOut,y=mux2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout, zr=ALUzr,ng=ALUng);
   DoNothing(in=ALUout, out=outM);
   
   //conect D-reg to alu - load is dest-bit see page68
   //only load if Cinstruction and is a Dinstruction
   And(a=instruction[15],b=instruction[4], out=DandNotA);
   DRegister(in=ALUout, load=DandNotA, out=DregOut);
 
   //if Cinstruction and writeM bit then writeM
   And(a=instruction[15],b=instruction[3], out=writeM);
   
   JumpCal(isCinstruction=instruction[15], j1=instruction[2],j2=instruction[1],j3=instruction[0],ng=ALUng,zr=ALUzr,out=jumpCalOut);
   
   PC(in=AregOut,load=jumpCalOut,inc=true,reset=reset, out[0..14]=pc);
   

    
  
}

