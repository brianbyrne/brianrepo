// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/1/RAM64.hdl

/**
 * Memory of 64 registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM64[address(t)](t)
 *     Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM64 {

    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Implementation missing.
    DMux8Way(in=load, sel=address[3..5], a=loadaout,b=loadbout,c=loadcout,d=loaddout,e=loadeout,f=loadfout,g=loadgout,h=loadhout); 
    
    RAM8(in=in,load=loadaout,address=address[0..2], out=out0);
    RAM8(in=in,load=loadbout,address=address[0..2], out=out1);
    RAM8(in=in,load=loadcout,address=address[0..2], out=out2);
    RAM8(in=in,load=loaddout,address=address[0..2], out=out3);
    RAM8(in=in,load=loadeout,address=address[0..2], out=out4);
    RAM8(in=in,load=loadfout,address=address[0..2], out=out5);
    RAM8(in=in,load=loadgout,address=address[0..2], out=out6);
    RAM8(in=in,load=loadhout,address=address[0..2], out=out7);
    
    Mux8Way16(a=out0,b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[3..5], out=out);
    
}
